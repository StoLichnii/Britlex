/**
Нормализация блочной модели
*/
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
*/
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
*/
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
*/
:where(
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol,
  dl
):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
*/
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
*/
p {
  --paragraphMarginBottom: 24px;

  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
*/
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}


/**
  Упрощаем работу с изображениями
*/
img {
  display: block;
  max-width: 100%;
}

/**
  Наследуем свойства шрифт для полей ввода
*/
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
  */
  height: 100%;
}

/**
  Плавный скролл
*/
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
  */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
  */
  line-height: 1.5;
}

/**
  Приводим к единому цвету svg-элементы
*/
svg *[fill] { fill: currentColor }
svg *[stroke] { stroke: currentColor }

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
*/
svg * {
  transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
*/
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}


@font-face {
  font-family: "Poppins";
  src: url(../fonts/Poppins-400.woff2) format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: "Poppins";
  src: url(../fonts/Poppins-500.woff2) format("woff2");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: "Poppins";
  src: url(../fonts/Poppins-600.woff2) format("woff2");
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}

:root {
  --color-dark: #000000;
  --color-dark-alt: #263238;
  --color-gray: #8F95A5;
  --color-gray-alt: #F5F5F5;
  --color-light: #ffffff;
  --container-width: 1340px;
  --container-padding-x: 50px;
  --font-family-base: "Poppins", sans-serif;
  --transition-duration: 0.2s;
  --border-radius: 10px;
  --border-radius-small: 5px;
  --border-radius-big: 15px;

}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.header, .section, .footer {
  max-width: 1600px;
  margin-inline: auto;
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  -webkit-clip-path: inset(100%) !important;
          clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

body {
  font-weight: 400;
  font-family: var(--font-family-base);
  color: var(--color-gray);
  background-color: var(--color-light);
}

a,
button,
input,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  text-decoration: none;
  color: inherit;
}

.header__inner {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.burger-button {
  position: relative;
  padding: 0;
  background-color: transparent;
  border: none;
  width: 39px;
  aspect-ratio: 1;  
  border-radius: var(--border-radius-small);
}

.logo-dark {
  font-size: 36px;
  color: var(--color-dark);
}
.logo-gray {
  font-size: 36px;
  color: var(--color-gray);
}

@media (hover: hover) {
  .burger-button:hover {
    background-color: var(--color-gray);
  }
  .logo:hover, .button:hover, .logo:hover {
    opacity: 0.7;
  }
}
@media (hover: none) {
  .burger-button:active {
    background-color: var(--color-gray);
  }
  .logo:active, .button:active, .logo:active {
    opacity: 0.8;
  }
}
/* .burger-button::after {
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  content: "";
  width: 70%;
  height: 2px;
  background-color: var(--color-dark);
  border-radius: 2px;
  box-shadow: 0 -8px, 0 8px;
} */



.burger-button__line, .burger-button__line::before, .burger-button__line::after {
  position: absolute;
  height: 3px;
  background-color: var(--color-dark);
}

.burger-button__line {
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  width: 70%;
}

.burger-button__line::before {
  top: -9px;
  left: 0;
  width: 100%;
  content: "";
}

.burger-button__line::after {
  left: 0;
  top: 9px;
  width: 70%;
  content: "";
}


@media (min-width: 766.9px) {
  .visible-mobile {
    display: none !important;
  }
}